from Crypto.Util.number import bytes_to_long, long_to_bytes, getPrime
from gmpy2 import *

ns=[38322084524425631773512185026541089228405633, 25462710470915228506414306797318973893451153, 20861969451418828508261744435288112188519359, 26079638693045621562442297575422450286375073, 18524625555308070647208122101199005864281383, 18213601965187069302174137338860124574417563, 38441537682924152476395000652412779695453671, 35850397026881732249347495693156035925137511, 32008456100282843954172969257838075024865801, 35183561113608182379759381676474329763315001, 43002703308695647354814968213521236303546239, 21566139769063873727238995734498022925765689, 32872717256634153205689731031903202820774863, 41371909453059516971677387683534707012380483, 24135933667806205999865626897330770550992169, 28553655692071395449602686749806117018306751, 22106527653054086563420392821924624474791001, 33978663111547938238649441312025267324694487, 33488203801639311952450396249979406102359633, 40208713175935138594349644888388380970242613]
cs=[37943770510511201192611801861942472324524011, 18596314737066972145095279418965837937391212, 5885546191866328932841021435730643970277399, 10081724237784381950524862608911880019101134, 14086028093464003714655973382251968369005161, 9744032756492004980118816557790672232826094, 8959577962192987762494280708215101582735752, 17621534757644701692196651450718406169734886, 1785029154664370644868323383099060862867144, 10705990638388440561608885459382642839266189, 24706489839947521268568966254347581280211863, 19165088917416669803550969742060819199370086, 5765841583139606404666352105725004492025615, 30860548476792398633143427280824850511422151, 17719557389531604140525135853404819401673052, 26731364812296469313713541776971867163031586, 13250084657610878967808379732215851784837952, 7086356618266594930574622076674364373644430, 21606709501477857296910516817726269823630411, 26181004007675678964512720965689940473478115]

e = 11  # 使用和加密相同的指数
N = 1  # 计算所有模数的乘积
for n in ns:
    N*=n
M_list = []
for n in ns:
    M_list.append(N // n)
t_list = []
for i in range(len(ns)):
 t_list.append(invert(M_list[i], ns[i]))
summary = 0
for i in range(len(ns)):
 summary = (summary + cs[i] * t_list[i] * M_list[i]) % N
m = iroot(summary, e)[0]
print(m)
print(long_to_bytes(m))